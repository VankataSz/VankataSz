A surpasser of an element of an array is a greater element to its right, therefore x[j] is a surpasser of x[i] if i < j and x[i] < x[j].
The surpasser count of an element is the number of surpassers. Given an array of distinct integers, for each element of the array find its surpasser count i.e. count the number of elements to the right that are greater than that element.

Examples : 

Input:  [2, 7, 5, 3, 0, 8, 1]
Output: [4, 1, 1, 1, 2, 0, 0]

//Solution


class SurpasserCount {

	// Method to find surpasser count of each element in array
	static void findSurpasser(int arr[], int n)
	{
		for (int i = 0; i < n; i++)
		{
			
			//surpasser count for element arr[i]
			int count = 0;
			for (int j = i + 1; j < n; j++)
				if (arr[j] > arr[i])
					count++;
	
			System.out.print(count +" ");
		}
	}
	
	// Method to print array
	static void printArray(int arr[], int n)
	{
		for (int i = 0; i < n; i++)
			System.out.print( arr[i] + " ");
			
		System.out.println();
	}
	
	//Main method
	public static void main (String[] args) 
	{
		int arr[] = { 2, 7, 5, 3, 0, 8, 1 };
		int n = arr.length;
	
		System.out.println("Given array is ");
		printArray(arr, n);
	
		System.out.println("Surpasser Count of"
							+ " array is ");
		findSurpasser(arr, n);
	}
}

